{
  "title": "Music Folder Utils",
  "subtitle": "\nA comprehensive music library management tool for Linux desktops (GNOME/KDE). Organizes music files, extracts album art, creates symlinks, and syncs metadata with MusicBrainz.",
  "content": "\n[![Donate using Liberapay](https://liberapay.com/assets/widgets/donate.svg)](https://liberapay.com/Anoraktrend/donate)\n\n![Nautilus with Album Art Icons](/images/uploads/screenshot_nautilus.jpg) / ![Dolphin with Album Art Icons](/images/uploads/screenshot_dolphin.jpg)\n\n## Features\n\n* **Music Library Organization** - Automatically organizes music into `Artists/Artist/Album` structure\n* **Album Art Integration** - Extracts embedded artwork and sets as folder icons\n* **Smart Symlinks** - Creates `Albums/` and `Tracks/` directories with organized symlinks\n* **Metadata Sync** - Updates all music metadata from MusicBrainz database\n* **Import Management** - Import music from external directories with metadata validation\n* **Reorganize** - Find and reorganize misplaced music files\n* **Fast Processing** - Parallel processing for large music collections\n* **Quality Control** - Validates metadata before importing, excludes files without proper tags\n\n## Quick start\n\nBuild (debug):\n\n```bash\ncargo build\n```\n\nBuild (release):\n\n```bash\ncargo build --release\n```\n\nRun (example):\n\n```bash\ncargo run --release -- all ~/Music\n# or, run the built binary\n./target/release/mfutil art ~/Music\n```\n\nMost commands default to `~/Music` if no path is supplied.\n\n## Fast Builds with Just\n\nFor much faster builds, use **Just** - a modern command runner that provides significant performance improvements:\n\n### Install Just\n\n```bash\ncargo install just\n```\n\n**Or from your distribution's package manager:**\n\n```bash\n# Arch Linux\nsudo pacman -S just\n\n# Debian/Ubuntu\nsudo apt install just\n\n# Fedora\nsudo dnf install just\n\n# macOS (Homebrew)\nbrew install just\n\n# Alpine Linux\nsudo apk add just\n```\n\n### Fast Build Commands\n\n```bash\njust dev           # Fastest development builds\njust build         # Optimized release builds\njust build-fast    # Fast release builds (no LTO)\njust check         # Check without building\njust test          # Run tests\n```\n\n### Installation Commands\n\n```bash\njust install-local     # Install for current user (~/.local/bin)\njust install-system    # Install system-wide (/usr/local/bin) - requires sudo\njust install-custom /path/to/dir  # Install to custom location\n```\n\n### Performance Benefits\n\n* **Development builds**: 2-5x faster with incremental compilation\n* **Release builds**: 1.5-3x faster with optimized settings\n* **Fast builds**: 3-10x faster than standard release\n* **Rebuilds**: 10-50x faster with build caching (sccache)\n* **Linking**: 2-4x faster with lld linker\n\n### Setup Build Tools (Optional)\n\n```bash\njust install-sccache    # Install build cache for massive rebuild speedups\njust install-lld        # Install faster linker\njust setup              # Install all build dependencies\n```\n\n### Build Performance Comparison\n\n| Command                 | Description         | Speed | Use Case          |\n| ----------------------- | ------------------- | ----- | ----------------- |\n| `cargo build`           | Standard dev build  | Slow  | Basic development |\n| `just dev`              | Optimized dev build | Fast  | Fast development  |\n| `cargo build --release` | Standard release    | Slow  | Production        |\n| `just build`            | Optimized release   | Fast  | Best optimization |\n| `just build-fast`       | Fast release        | Fast  | Development/CI    |\n\n**Example workflow:**\n\n```bash\njust check          # Quick error check\njust dev            # Fast rebuild during development\njust install-local  # Install for current user\n./target/debug/mfutil organize ./testdata\n```\n\n## CLI subcommands\n\nThe binary exposes these subcommands (see `src/main.rs`):\n\n* `all [music_dir]` — run sync, reorganize, import (with metadata validation), organize, create album and track symlinks\n* `albums [music_dir]` — create symlinks for albums under `Albums/`\n* `tracks [music_dir]` — create symlinks for tracks under `Tracks/`\n* `sync [music_dir]` — query MusicBrainz and update all metadata tags (MusicBrainz Release IDs and other metadata)\n* `art [music_dir]` — extract album/artist art and set folder icons\n* `reorganize [music_dir]` — reorganize misplaced files to their proper artist/album structure based on metadata\n* `import <import_path> [music_dir]` — import files from an external directory and organize them into the music library structure\n* `organize [music_dir]` — organize music files within the music directory structure\n\n### Examples\n\n```bash\n# Complete workflow - sync, reorganize, import, organize, and create symlinks\ncargo run --release -- all ~/Music\n\n# Sync metadata with MusicBrainz\ncargo run --release -- sync ~/Music\n\n# Import music from Downloads with metadata validation\ncargo run --release -- import ~/Downloads/Music ~/Music\n\n# Reorganize misplaced files\ncargo run --release -- reorganize ~/Music\n\n# Extract album art and set folder icons\ncargo run --release -- art ~/Music\n\n# Create album symlinks\ncargo run --release -- albums ~/Music\n\n# Create track symlinks\ncargo run --release -- tracks ~/Music\n```\n\n## Project layout & important files\n\n* `src/main.rs` — CLI parsing and orchestration using a small TUI helper\n* `src/tui.rs` — `run_tui(title, total, closure, running_token)` progress helper (uses `mpsc::Sender<String>` to receive progress messages)\n* `src/utils.rs` — filesystem helpers (expects a `~/Music/Artists` layout)\n* `src/commands/` — per-feature modules:\n\n  * `art.rs` — album/artist art extraction and folder icon management\n  * `albums.rs` — album symlink creation and management\n  * `tracks.rs` — track symlink creation and management\n  * `sync.rs` — MusicBrainz metadata synchronization\n  * `organize.rs` — music library organization, reorganization, and import functionality\n\n## Enhanced Features\n\n### Comprehensive Metadata Sync\n\n* Updates all available metadata from MusicBrainz database\n* MusicBrainz Release IDs, artist, album, release date, and track information\n* Runs before import operations to ensure clean metadata\n\n### Smart Import with Validation\n\n* Import music from external directories (Downloads, Desktop, etc.)\n* **Metadata validation** - Only imports files with proper artist/album information\n* **Quality control** - Excludes files without sufficient metadata\n* **Conflict prevention** - Won't overwrite existing organized files\n\n### Intelligent Reorganization\n\n* Finds and reorganizes misplaced music files\n* Scans entire music directory for scattered audio files\n* Automatically determines correct artist/album structure\n* Preserves existing organized files\n\n### Optimized Workflow\n\n* **Proper ordering**: Sync → Reorganize → Import → Organize → Symlinks\n* **Parallel processing** for large music collections\n* **Progress tracking** with detailed status updates\n* **Error handling** with graceful fallbacks\n\n## System dependencies\n\nThe Rust crates wrap native libraries. On Debian/Ubuntu you will typically need:\n\n```bash\nsudo apt update\nsudo apt install build-essential pkg-config libavformat-dev libavcodec-dev libavutil-dev libmagickwand-dev libglib2.0-dev libgirepository1.0-dev git\n```\n\nAlso ensure `ffmpeg` is installed on the system (runtime) for tagging uncommon files and extracting attached pictures.\n\n### Optional: Performance Tools\n\nFor significantly faster builds, install these optional tools:\n\n#### sccache (Build Caching)\n\n```bash\n# Install sccache for 10-50x faster rebuilds\ncargo install sccache\n\n# Or from system packages\nsudo apt install sccache    # Ubuntu/Debian\nsudo pacman -S sccache      # Arch Linux and derivatives\nsudo dnf install sccache    # Fedora and similar, package name may vary\n```\n\n#### lld (Faster Linker)\n\n```bash\n# Install lld for 2-4x faster linking\nsudo apt install lld        # Ubuntu/Debian\nsudo pacman -S lld          # Arch Linux and derivatives\nsudo dnf install lld        # Fedora and similar, package name may vary\nbrew install llvm           # macOS\n```\n\n**With these tools installed:**\n\n* `just dev` builds become 2-5x faster\n* `just build-fast` provides 3-10x faster releases\n* Rebuilds become 10-50x faster with caching\n\n## Configuration: API keys\n\nTwo external APIs require keys if you want placeholder images or artist images fetched automatically:\n\n* `PEXELS_API_KEY` — used to fetch placeholder images from Pexels for Artists/Albums/Tracks.\n* `AUDIODB_API_KEY` — used to fetch artist thumbnails from TheAudioDB.\n\nSet them in your shell before running the program, for example:\n\n```bash\nexport PEXELS_API_KEY=\"your_pexels_api_key_here\"\nexport AUDIODB_API_KEY=\"your_audiodb_api_key_here\"\n```\n\nYou can also set them via a .env file, the .env.example is available for reference.\n\n**Free Tier API Keys:**\n\n* AudioDB free tier key: `123`\n\nif you are simply too lazy to get a pexels api key of your own, mine is below\n\n```bash\nPEXELS_API_KEY=\"563492ad6f91700001000001aacfd87a60cb4f369cb54d595b2f4142\"\n```\n\nYou should remove the quotes when pasting into your .env file.\n\nIf the variables are not set the program will skip those network calls and continue with local fallbacks.\n\n## Enhanced Workflow\n\nThe `all` command provides a comprehensive music library management workflow:\n\n```bash\ncargo run --release -- all ~/Music\n```\n\n### Complete Workflow Steps:\n\n1. **Sync** - Updates all metadata from MusicBrainz database\n\n   * MusicBrainz Release IDs, artist, album, release date, track information\n   * Runs first to ensure clean metadata for subsequent operations\n2. **Reorganize** - Finds and reorganizes misplaced files\n\n   * Scans entire music directory for scattered audio files\n   * Moves files to proper `Artists/Artist/Album` structure\n   * Preserves existing organized files\n3. **Import** - Imports external files with metadata validation\n\n   * Imports from Downloads, Desktop, or other external directories\n   * **Validates metadata** - Only imports files with proper artist/album info\n   * **Quality control** - Excludes files without sufficient metadata\n   * **Conflict prevention** - Won't overwrite existing files\n4. **Organize** - Organizes internal subfolders\n\n   * Handles folders already within the music directory\n   * Reorganizes complex nested structures\n   * Ensures consistent `Artists/Artist/Album` layout\n5. **Album Symlinks** - Creates organized album collection\n\n   * Creates `Albums/` directory with symlinks to all albums\n   * Provides flat view of entire music collection\n   * Optimized for media players and browsing\n6. **Track Symlinks** - Creates organized track collection\n\n   * Creates `Tracks/` directory with symlinks to all tracks\n   * Provides flat view of all individual tracks\n   * Perfect for shuffle playback and track discovery\n\n### Individual Commands\n\nFor more control, use individual commands:\n\n```bash\n# Sync only\ncargo run --release -- sync ~/Music\n\n# Import with validation\ncargo run --release -- import ~/Downloads ~/Music\n\n# Reorganize misplaced files\ncargo run --release -- reorganize ~/Music\n\n# Extract art and set icons\ncargo run --release -- art ~/Music\n```\n\n### Skip Options\n\nThe `all` command supports skipping specific steps:\n\n```bash\n# Skip sync and art processing\ncargo run --release -- all ~/Music --skip sync,art\n\n# Skip reorganize step\ncargo run --release -- all ~/Music --skip reorganize\n\n# Skip import step\ncargo run --release -- all ~/Music --skip import\n```\n\n## Security / configuration\n\n* `src/commands/art.rs` currently contains hard-coded API keys (`PEXELS_API_KEY`, `AUDIODB_API_KEY`) — these are secrets. Replace them with environment variables before using in production. If you change the mechanism, update all call sites that expect those constants.\n\n## Debugging\n\nEnable backtraces:\n\n```bash\nRUST_BACKTRACE=1 cargo run -- <subcommand>\n```\n\n## Manual Pages\n\nComprehensive manual pages are available in the `man/` directory:\n\n* `mfutil.1` - Main program manual\n* `mfutil-art.1` - Album art extraction and management\n* `mfutil-albums.1` - Album symlink creation\n* `mfutil-tracks.1` - Track symlink creation\n* `mfutil-sync.1` - MusicBrainz metadata synchronization\n* `mfutil-reorganize.1` - File reorganization\n* `mfutil-import.1` - Music import functionality\n* `mfutil-cd.1` - CD ripping (requires cd-ripping feature)\n* `mfutil-all.1` - Complete workflow automation\n\nTo install manpages system-wide:\n\n```bash\nsudo cp man/*.1 /usr/local/share/man/man1/\nsudo mandb\n```\n\nThen view with: `man mfutil`, `man mfutil-art`, etc.\n\n## License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.",
  "featuredImage": "/images/uploads/screenshot_nautilus.jpg",
  "seoMetaImage": "/images/uploads/screenshot_nautilus.jpg",
  "seoDescription": "music library manager, Linux music organizer, MusicBrainz sync tool, Rust music utility, album art extractor, smart symlinks for music, fast music management CLI, GNOME/KDE music tool, parallel music processing, Just build system, sccache lld Rust."
}